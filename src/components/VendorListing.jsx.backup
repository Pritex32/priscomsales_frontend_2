import React, { useState, useEffect } from 'react';
import { useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';
import { 
  Store, Users, Package, CheckCircle, XCircle, Clock, 
  Search, Filter, Plus, Edit2, Trash2, Eye, Phone, 
  Mail, MapPin, Calendar, TrendingUp, AlertCircle, LayoutDashboard,
  Upload, FileText, Link as LinkIcon, ArrowLeft, DollarSign,
  TrendingDown, Palette, Ruler, Weight, Image, Video, ChevronLeft, ChevronRight
} from 'lucide-react';
import api from '../services/api';

const VendorListing = () => {
  const navigate = useNavigate();
  const { user, role } = useSelector(state => state.auth);
  const [activeTab, setActiveTab] = useState('registration');
  const [pendingVendors, setPendingVendors] = useState([]);
  const [pendingProducts, setPendingProducts] = useState([]);
  const [selectedVendor, setSelectedVendor] = useState(null);
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [isViewModalOpen, setIsViewModalOpen] = useState(false);
  const [isProductModalOpen, setIsProductModalOpen] = useState(false);
  const [isRejectModalOpen, setIsRejectModalOpen] = useState(false);
  const [rejectReason, setRejectReason] = useState('');
  const [rejectType, setRejectType] = useState(''); // 'vendor' or 'product'
  const [rejectId, setRejectId] = useState(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [loading, setLoading] = useState(false);
  const [stats, setStats] = useState({
    totalPendingVendors: 0,
    totalPendingProducts: 0,
    approvedToday: 0,
    rejectedToday: 0
  });

  // Fetch pending vendors and products on mount
  useEffect(() => {
    if (role?.toLowerCase() === 'md') {
      fetchPendingVendors();
      fetchPendingProducts();
    }
  }, [role]);

  const fetchPendingVendors = async () => {
    try {
      setLoading(true);
      const response = await api.get('/vendors/pending');
      setPendingVendors(response.data);
      setStats(prev => ({ ...prev, totalPendingVendors: response.data.length }));
    } catch (error) {
      toast.error('Failed to fetch pending vendors');
      console.error(error);
    } finally {
      setLoading(false);
    }
  };

  const fetchPendingProducts = async () => {
    try {
      setLoading(true);
      const response = await api.get('/vendors/products/pending');
      setPendingProducts(response.data);
      setStats(prev => ({ ...prev, totalPendingProducts: response.data.length }));
    } catch (error) {
      toast.error('Failed to fetch pending products');
      console.error(error);
    } finally {
      setLoading(false);
    }
  };

  const handleApproveVendor = async (vendorId) => {
    try {
      setLoading(true);
      const response = await api.put(`/vendors/${vendorId}/approve`);
      toast.success(`Vendor approved! Access code: ${response.data.access_code}`);
      fetchPendingVendors();
      setStats(prev => ({ ...prev, approvedToday: prev.approvedToday + 1 }));
    } catch (error) {
      toast.error(error.response?.data?.detail || 'Failed to approve vendor');
    } finally {
      setLoading(false);
    }
  };

  const handleRejectVendor = async () => {
    if (!rejectReason.trim()) {
      toast.error('Please provide a rejection reason');
      return;
    }
    try {
      setLoading(true);
      const formData = new FormData();
      formData.append('reason', rejectReason);
      await api.put(`/vendors/${rejectId}/reject`, formData, {
        headers: { 'Content-Type': 'multipart/form-data' }
      });
      toast.success('Vendor rejected');
      fetchPendingVendors();
      setIsRejectModalOpen(false);
      setRejectReason('');
      setStats(prev => ({ ...prev, rejectedToday: prev.rejectedToday + 1 }));
    } catch (error) {
      toast.error(error.response?.data?.detail || 'Failed to reject vendor');
    } finally {
      setLoading(false);
    }
  };

  const handleApproveProduct = async (productId) => {
    try {
      setLoading(true);
      await api.put(`/vendors/products/${productId}/approve`);
      toast.success('Product approved successfully');
      fetchPendingProducts();
      setStats(prev => ({ ...prev, approvedToday: prev.approvedToday + 1 }));
    } catch (error) {
      toast.error(error.response?.data?.detail || 'Failed to approve product');
    } finally {
      setLoading(false);
    }
  };

  const handleRejectProduct = async () => {
    if (!rejectReason.trim()) {
      toast.error('Please provide a rejection reason');
      return;
    }
    try {
      setLoading(true);
      const formData = new FormData();
      formData.append('reason', rejectReason);
      await api.put(`/vendors/products/${rejectId}/reject`, formData, {
        headers: { 'Content-Type': 'multipart/form-data' }
      });
      toast.success('Product rejected');
      fetchPendingProducts();
      setIsRejectModalOpen(false);
      setRejectReason('');
      setStats(prev => ({ ...prev, rejectedToday: prev.rejectedToday + 1 }));
    } catch (error) {
      toast.error(error.response?.data?.detail || 'Failed to reject product');
    } finally {
      setLoading(false);
    }
  };

  const openRejectModal = (type, id) => {
    setRejectType(type);
    setRejectId(id);
    setRejectReason('');
    setIsRejectModalOpen(true);
  };

  const handleViewVendor = (vendor) => {
    setSelectedVendor(vendor);
    setIsViewModalOpen(true);
  };

  const handleViewProduct = (product) => {
    setSelectedProduct(product);
    setIsProductModalOpen(true);
  };

  // Filter vendors based on search
  const filteredVendors = pendingVendors.filter(vendor =>
    vendor.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
    vendor.vendor_phone?.toLowerCase().includes(searchQuery.toLowerCase()) ||
    vendor.category?.toLowerCase().includes(searchQuery.toLowerCase())
  );

  // Filter products based on search
  const filteredProducts = pendingProducts.filter(product =>
    product.product_name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
    product.category?.toLowerCase().includes(searchQuery.toLowerCase())
  );

  // Stats Card Component
  const StatsCard = ({ title, value, icon: Icon, color, trend }) => (
    <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6 hover:shadow-md transition-shadow">
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm font-medium text-gray-600 mb-1">{title}</p>
          <h3 className="text-3xl font-bold text-gray-900">{value}</h3>
          {trend && (
            <p className="text-xs text-gray-500 mt-2 flex items-center">
              <TrendingUp className="w-3 h-3 mr-1" />
              {trend}
            </p>
          )}
        </div>
        <div className={`p-4 rounded-full ${color}`}>
          <Icon className="w-6 h-6 text-white" />
        </div>
      </div>
    </div>
  );

  // Pending Vendors Tab
  const renderPendingVendorsTab = () => (
    <div className="space-y-6">
      {loading && (
        <div className="flex justify-center items-center py-12">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600"></div>
        </div>
      )}
      
      {!loading && filteredVendors.length === 0 && (
        <div className="text-center py-12 bg-gray-50 rounded-lg">
          <Store className="w-16 h-16 mx-auto text-gray-400 mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">No Pending Vendors</h3>
          <p className="text-gray-500">All vendor applications have been processed</p>
        </div>
      )}

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {filteredVendors.map((vendor) => (
          <div key={vendor.vendor_id} className="bg-white rounded-xl shadow-sm border border-gray-200 hover:shadow-md transition-all overflow-hidden">
            <div className="bg-gradient-to-r from-indigo-500 to-purple-600 p-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div className="bg-white/20 backdrop-blur-sm p-2 rounded-lg">
                    <Store className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <h3 className="text-xl font-bold text-white">{vendor.name}</h3>
                    <p className="text-indigo-100 text-sm">{vendor.category}</p>
                  </div>
                </div>
                <span className="bg-yellow-400 text-yellow-900 px-3 py-1 rounded-full text-xs font-semibold flex items-center">
                  <Clock className="w-3 h-3 mr-1" />
                  Pending
                </span>
              </div>
            </div>
            
            <div className="p-6 space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="flex items-start space-x-2">
                  <Phone className="w-4 h-4 text-gray-400 mt-1" />
                  <div>
                    <p className="text-xs text-gray-500">Phone</p>
                    <p className="text-sm font-medium text-gray-900">{vendor.vendor_phone}</p>
                  </div>
                </div>
                <div className="flex items-start space-x-2">
                  <MapPin className="w-4 h-4 text-gray-400 mt-1" />
                  <div>
                    <p className="text-xs text-gray-500">Location</p>
                    <p className="text-sm font-medium text-gray-900">{vendor.location}</p>
                  </div>
                </div>
              </div>
              
              <div>
                <p className="text-xs text-gray-500 mb-1">Delivery Scope</p>
                <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                  {vendor.delivery_scope}
                </span>
              </div>
              
              <div>
                <p className="text-xs text-gray-500 mb-1">Description</p>
                <p className="text-sm text-gray-700 line-clamp-2">{vendor.description}</p>
              </div>
              
              <div className="flex items-center space-x-2 pt-4 border-t">
                <button
                  onClick={() => handleViewVendor(vendor)}
                  className="flex-1 flex items-center justify-center px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors font-medium"
                >
                  <Eye className="w-4 h-4 mr-2" />
                  View Details
                </button>
                <button
                  onClick={() => handleApproveVendor(vendor.vendor_id)}
                  disabled={loading}
                  className="flex-1 flex items-center justify-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors font-medium disabled:opacity-50"
                >
                  <CheckCircle className="w-4 h-4 mr-2" />
                  Approve
                </button>
                <button
                  onClick={() => openRejectModal('vendor', vendor.vendor_id)}
                  disabled={loading}
                  className="flex items-center justify-center px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors disabled:opacity-50"
                >
                  <XCircle className="w-4 h-4" />
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  // Pending Products Tab
  const renderPendingProductsTab = () => (
    <div className="space-y-6">
      {loading && (
        <div className="flex justify-center items-center py-12">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600"></div>
        </div>
      )}
      
      {!loading && filteredProducts.length === 0 && (
        <div className="text-center py-12 bg-gray-50 rounded-lg">
          <Package className="w-16 h-16 mx-auto text-gray-400 mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">No Pending Products</h3>
          <p className="text-gray-500">All product submissions have been reviewed</p>
        </div>
      )}

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredProducts.map((product) => (
          <div key={product.id} className="bg-white rounded-xl shadow-sm border border-gray-200 hover:shadow-md transition-all overflow-hidden">
            <div className="relative">
              {product.product_images && product.product_images.length > 0 ? (
                <img
                  src={product.product_images[0]}
                  alt={product.product_name}
                  className="w-full h-48 object-cover"
                  onError={(e) => {
                    e.target.src = 'https://via.placeholder.com/300x200?text=No+Image';
                  }}
                />
              ) : (
                <div className="w-full h-48 bg-gray-200 flex items-center justify-center">
                  <Package className="w-16 h-16 text-gray-400" />
                </div>
              )}
              <span className="absolute top-3 right-3 bg-yellow-400 text-yellow-900 px-3 py-1 rounded-full text-xs font-semibold">
                Pending
              </span>
            </div>
            
            <div className="p-5 space-y-3">
              <div>
                <h4 className="text-lg font-bold text-gray-900 mb-1">{product.product_name}</h4>
                <p className="text-sm text-gray-600">{product.category}</p>
              </div>
              
              <div className="flex items-center justify-between py-2 border-t border-b">
                <div>
                  <p className="text-xs text-gray-500">Price</p>
                  <p className="text-lg font-bold text-indigo-600">₦{product.price?.toLocaleString()}</p>
                </div>
                <div className="text-right">
                  <p className="text-xs text-gray-500">Stock</p>
                  <p className="text-lg font-bold text-gray-900">{product.stock_quantity}</p>
                </div>
              </div>
              
              <div className="flex items-center space-x-2">
                <button
                  onClick={() => handleViewProduct(product)}
                  className="flex-1 flex items-center justify-center px-3 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors text-sm font-medium"
                >
                  <Eye className="w-4 h-4 mr-1" />
                  View
                </button>
                <button
                  onClick={() => handleApproveProduct(product.id)}
                  disabled={loading}
                  className="flex-1 flex items-center justify-center px-3 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors text-sm font-medium disabled:opacity-50"
                >
                  <CheckCircle className="w-4 h-4 mr-1" />
                  Approve
                </button>
                <button
                  onClick={() => openRejectModal('product', product.id)}
                  disabled={loading}
                  className="flex items-center justify-center px-3 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors disabled:opacity-50"
                >
                  <XCircle className="w-4 h-4" />
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-blue-50 to-indigo-50 p-6">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center space-x-3 mb-2">
          <div className="p-3 bg-indigo-600 rounded-lg">
            <Store className="w-8 h-8 text-white" />
          </div>
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Vendor Management</h1>
            <p className="text-gray-600">Review and approve vendor applications and product listings</p>
          </div>
        </div>
      </div>

      {/* Stats Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <StatsCard
          title="Pending Vendors"
          value={stats.totalPendingVendors}
          icon={Clock}
          color="bg-yellow-500"
          trend="Awaiting review"
        />
        <StatsCard
          title="Pending Products"
          value={stats.totalPendingProducts}
          icon={Package}
          color="bg-orange-500"
          trend="Awaiting approval"
        />
        <StatsCard
          title="Approved Today"
          value={stats.approvedToday}
          icon={CheckCircle}
          color="bg-green-500"
        />
        <StatsCard
          title="Rejected Today"
          value={stats.rejectedToday}
          icon={XCircle}
          color="bg-red-500"
        />
      </div>

      {/* Search Bar */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-4 mb-6">
        <div className="flex items-center space-x-3">
          <Search className="w-5 h-5 text-gray-400" />
          <input
            type="text"
            placeholder="Search vendors or products..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="flex-1 outline-none text-gray-700 placeholder-gray-400"
          />
        </div>
      </div>

      {/* Tabs */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 mb-6">
        <div className="flex border-b border-gray-200">
          <button
            onClick={() => setActiveTab('pending')}
            className={`flex-1 px-6 py-4 text-center font-medium transition-colors ${
              activeTab === 'pending'
                ? 'text-indigo-600 border-b-2 border-indigo-600 bg-indigo-50'
                : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'
            }`}
          >
            <div className="flex items-center justify-center space-x-2">
              <Clock className="w-5 h-5" />
              <span>Pending Vendors</span>
              {stats.totalPendingVendors > 0 && (
                <span className="bg-yellow-400 text-yellow-900 px-2 py-0.5 rounded-full text-xs font-semibold">
                  {stats.totalPendingVendors}
                </span>
              )}
            </div>
          </button>
          <button
            onClick={() => setActiveTab('products')}
            className={`flex-1 px-6 py-4 text-center font-medium transition-colors ${
              activeTab === 'products'
                ? 'text-indigo-600 border-b-2 border-indigo-600 bg-indigo-50'
                : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'
            }`}
          >
            <div className="flex items-center justify-center space-x-2">
              <Package className="w-5 h-5" />
              <span>Pending Products</span>
              {stats.totalPendingProducts > 0 && (
                <span className="bg-orange-400 text-orange-900 px-2 py-0.5 rounded-full text-xs font-semibold">
                  {stats.totalPendingProducts}
                </span>
              )}
            </div>
          </button>
        </div>
      </div>

      {/* Tab Content */}
      <div>
        {activeTab === 'pending' && renderPendingVendorsTab()}
        {activeTab === 'products' && renderPendingProductsTab()}
      </div>

      {/* View Vendor Modal */}
      {isViewModalOpen && selectedVendor && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4" onClick={() => setIsViewModalOpen(false)}>
          <div className="bg-white rounded-2xl shadow-2xl max-w-3xl w-full max-h-[90vh] overflow-y-auto" onClick={(e) => e.stopPropagation()}>
            <div className="sticky top-0 bg-gradient-to-r from-indigo-500 to-purple-600 p-6 rounded-t-2xl">
              <div className="flex items-center justify-between">
                <h2 className="text-2xl font-bold text-white">Vendor Details</h2>
                <button onClick={() => setIsViewModalOpen(false)} className="text-white hover:bg-white/20 p-2 rounded-lg transition-colors">
                  <XCircle className="w-6 h-6" />
                </button>
              </div>
            </div>
            
            <div className="p-6 space-y-6">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <p className="text-sm text-gray-500 mb-1">Vendor Name</p>
                  <p className="font-semibold text-gray-900">{selectedVendor.name}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-500 mb-1">Category</p>
                  <p className="font-semibold text-gray-900">{selectedVendor.category}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-500 mb-1">Phone</p>
                  <p className="font-semibold text-gray-900">{selectedVendor.vendor_phone}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-500 mb-1">Location</p>
                  <p className="font-semibold text-gray-900">{selectedVendor.location}</p>
                </div>
                <div className="col-span-2">
                  <p className="text-sm text-gray-500 mb-1">Contact Link</p>
                  <a href={selectedVendor.contact_link} target="_blank" rel="noreferrer" className="text-indigo-600 hover:underline">
                    {selectedVendor.contact_link}
                  </a>
                </div>
                <div className="col-span-2">
                  <p className="text-sm text-gray-500 mb-1">Description</p>
                  <p className="text-gray-700">{selectedVendor.description}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-500 mb-1">Delivery Scope</p>
                  <p className="font-semibold text-gray-900">{selectedVendor.delivery_scope}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-500 mb-1">Submitted</p>
                  <p className="font-semibold text-gray-900">{new Date(selectedVendor.created_at).toLocaleDateString()}</p>
                </div>
              </div>
              
              {/* Document Links */}
              <div>
                <h3 className="font-semibold text-gray-900 mb-3">Submitted Documents</h3>
                <div className="grid grid-cols-2 gap-3">
                  {selectedVendor.gov_id_url && (
                    <a href={selectedVendor.gov_id_url} target="_blank" rel="noreferrer" className="flex items-center p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                      <Eye className="w-4 h-4 mr-2 text-indigo-600" />
                      <span className="text-sm font-medium">Government ID</span>
                    </a>
                  )}
                  {selectedVendor.cac_url && (
                    <a href={selectedVendor.cac_url} target="_blank" rel="noreferrer" className="flex items-center p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                      <Eye className="w-4 h-4 mr-2 text-indigo-600" />
                      <span className="text-sm font-medium">CAC Certificate</span>
                    </a>
                  )}
                  {selectedVendor.location_proof_url && (
                    <a href={selectedVendor.location_proof_url} target="_blank" rel="noreferrer" className="flex items-center p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                      <Eye className="w-4 h-4 mr-2 text-indigo-600" />
                      <span className="text-sm font-medium">Location Proof</span>
                    </a>
                  )}
                  {selectedVendor.bulk_invoice_url && (
                    <a href={selectedVendor.bulk_invoice_url} target="_blank" rel="noreferrer" className="flex items-center p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                      <Eye className="w-4 h-4 mr-2 text-indigo-600" />
                      <span className="text-sm font-medium">Bulk Invoice</span>
                    </a>
                  )}
                  {selectedVendor.warehouse_photo_url && (
                    <a href={selectedVendor.warehouse_photo_url} target="_blank" rel="noreferrer" className="flex items-center p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                      <Eye className="w-4 h-4 mr-2 text-indigo-600" />
                      <span className="text-sm font-medium">Warehouse Photo</span>
                    </a>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* View Product Modal */}
      {isProductModalOpen && selectedProduct && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4" onClick={() => setIsProductModalOpen(false)}>
          <div className="bg-white rounded-2xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto" onClick={(e) => e.stopPropagation()}>
            <div className="sticky top-0 bg-gradient-to-r from-indigo-500 to-purple-600 p-6 rounded-t-2xl">
              <div className="flex items-center justify-between">
                <h2 className="text-2xl font-bold text-white">Product Details</h2>
                <button onClick={() => setIsProductModalOpen(false)} className="text-white hover:bg-white/20 p-2 rounded-lg transition-colors">
                  <XCircle className="w-6 h-6" />
                </button>
              </div>
            </div>
            
            <div className="p-6 space-y-4">
              {selectedProduct.product_images && selectedProduct.product_images.length > 0 && (
                <div className="grid grid-cols-3 gap-2">
                  {selectedProduct.product_images.map((img, idx) => (
                    <img key={idx} src={img} alt={`Product ${idx + 1}`} className="w-full h-32 object-cover rounded-lg" />
                  ))}
                </div>
              )}
              
              <div className="grid grid-cols-2 gap-4">
                <div className="col-span-2">
                  <p className="text-sm text-gray-500 mb-1">Product Name</p>
                  <p className="font-bold text-xl text-gray-900">{selectedProduct.product_name}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-500 mb-1">Category</p>
                  <p className="font-semibold text-gray-900">{selectedProduct.category}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-500 mb-1">Price</p>
                  <p className="font-bold text-xl text-indigo-600">₦{selectedProduct.price?.toLocaleString()}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-500 mb-1">Stock Quantity</p>
                  <p className="font-semibold text-gray-900">{selectedProduct.stock_quantity}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-500 mb-1">NAFDAC Number</p>
                  <p className="font-semibold text-gray-900">{selectedProduct.nafdac_number || 'N/A'}</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Reject Modal */}
      {isRejectModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4" onClick={() => setIsRejectModalOpen(false)}>
          <div className="bg-white rounded-2xl shadow-2xl max-w-md w-full" onClick={(e) => e.stopPropagation()}>
            <div className="bg-red-600 p-6 rounded-t-2xl">
              <div className="flex items-center space-x-3">
                <AlertCircle className="w-8 h-8 text-white" />
                <h2 className="text-2xl font-bold text-white">Reject {rejectType === 'vendor' ? 'Vendor' : 'Product'}</h2>
              </div>
            </div>
            
            <div className="p-6">
              <p className="text-gray-700 mb-4">Please provide a reason for rejection:</p>
              <textarea
                value={rejectReason}
                onChange={(e) => setRejectReason(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500"
                rows="4"
                placeholder="Enter rejection reason..."
              />
              
              <div className="flex space-x-3 mt-6">
                <button
                  onClick={() => setIsRejectModalOpen(false)}
                  className="flex-1 px-4 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors font-medium"
                >
                  Cancel
                </button>
                <button
                  onClick={rejectType === 'vendor' ? handleRejectVendor : handleRejectProduct}
                  disabled={loading || !rejectReason.trim()}
                  className="flex-1 px-4 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors font-medium disabled:opacity-50"
                >
                  {loading ? 'Rejecting...' : 'Confirm Rejection'}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default VendorListing;
